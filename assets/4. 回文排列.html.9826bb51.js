import{_ as n,o as s,c as a,a as p}from"./app.f886be28.js";const t={},e=p(`<h3 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h3><p>\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32\uFF0C\u7F16\u5199\u4E00\u4E2A\u51FD\u6570\u5224\u5B9A\u5176\u662F\u5426\u4E3A\u67D0\u4E2A\u56DE\u6587\u4E32\u7684\u6392\u5217\u4E4B\u4E00\u3002<br> \u5B57\u7B26\u4E32\u7531\u82F1\u6587\u5B57\u7B26\u7EC4\u6210\u3002</p><p>\u56DE\u6587\u4E32\u662F\u6307\u6B63\u53CD\u4E24\u4E2A\u65B9\u5411\u90FD\u4E00\u6837\u7684\u5355\u8BCD\u6216\u77ED\u8BED\u3002\u6392\u5217\u662F\u6307\u5B57\u7B26\u7684\u91CD\u65B0\u6392\u5217\u3002</p><p>\u8981\u6C42\uFF1A\u51CF\u5C11\u7A7A\u95F4\u4F7F\u7528\u3002</p><h3 id="\u793A\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u793A\u4F8B" aria-hidden="true">#</a> \u793A\u4F8B</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1A&quot;tactcoa&quot;
\u8F93\u51FA\uFF1Atrue\uFF08\u6392\u5217\u6709&quot;tacocat&quot;\u3001&quot;atcocta&quot;\uFF0C\u7B49\u7B49\uFF09
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u601D\u8DEF" tabindex="-1"><a class="header-anchor" href="#\u601D\u8DEF" aria-hidden="true">#</a> \u601D\u8DEF</h3><p>\u5173\u952E\u70B9\uFF1A\u54C8\u5E0C\u8868\u3001\u4F4D\u8FD0\u7B97</p><p>\u4E00\u4E2A\u5B57\u7B26\u4E32\u7684\u67D0\u4E2A\u6392\u5217\u662F\u5426\u80FD\u591F\u7EC4\u6210\u56DE\u6587\uFF0C\u53EA\u6709\u4E24\u79CD\u60C5\u51B5\uFF1A</p><ol><li>\u6240\u6709\u5B57\u7B26\u90FD\u51FA\u73B0\u5076\u6570\u6B21\u3002</li><li>\u53EA\u6709\u4E00\u4E2A\u5B57\u7B26\u51FA\u73B0\u5947\u6570\u6B21\uFF0C\u5176\u4F59\u51FA\u73B0\u5076\u6570\u6B21\u3002</li></ol><p>\u4F7F\u7528 0 \u548C 1 \u8868\u793A\u67D0\u4E2A\u5B57\u7B26\u51FA\u73B0\u6B21\u6570\u662F \u5076\u6570 \u8FD8\u662F \u5947\u6570\u3002<br> \u6700\u540E\u628A\u6BCF\u4E2A\u5B57\u7B26\u5BF9\u5E94\u7684\u6570\u5B57\u76F8\u52A0\uFF0C\u5927\u4E8E 1 \u8BF4\u660E\u6709\u8D85\u8FC7 1 \u4E2A\u7684\u5947\u6570\u3002</p><p>\u82F1\u6587\u5B57\u7B26\u6307\u7684\u662F\uFF0CASCII\u7801\u4E3A 32 - 126 \u7684\u5171 95 \u4E2A\u53EF\u663E\u793A\u5B57\u7B26\u3002<br> \u5982 C++ \u8BED\u8A00\u4E2D\uFF0C\u53EF\u4F7F\u7528 <code>bitset</code> \u58F0\u660E\u6307\u5B9A\u957F\u5EA6\u7684 \u6BD4\u7279\u4F4D \u6570\u7EC4\u3002<br> JavaScript \u5E76\u6CA1\u6709\u7C7B\u4F3C\u7684\u529F\u80FD\u3002<br> \u56E0\u6B64\u8FD9\u9898\u4E8B\u5B9E\u4E0A\u4E0D\u9002\u5408\u4F7F\u7528 \u4F4D\u8FD0\u7B97 \u5B9E\u73B0\u3002</p><p>\u5F3A\u884C\u5B9E\u73B0\u65B9\u6CD5\uFF1A\u4EE5 <code>&#39;@&#39;</code>\u3001<code>&#39;\`&#39;</code> \u4E3A\u5206\u5272\u7EBF\uFF0C\u5206\u4E3A\u4E09\u7EC4\u5B57\u7B26\u3002<br> \uFF08\u56E0\u4E3A\uFF0CJavaScript \u4F4D\u64CD\u4F5C\u65F6\u4F1A\u8F6C\u4E3A <strong>32\u4F4D</strong> \u6574\u6570\uFF09<br> \u6574\u6570\u7684\u6BCF\u4E2A\u4F4D \u5BF9\u5E94 \u4E00\u4E2A\u5B57\u7B26\uFF0C\u8BE5\u4F4D\u4E3A 1 \u8868\u793A\u5947\u6570\u4E2A\uFF0C\u4E3A 0 \u8868\u793A\u5076\u6570\u4E2A\u3002<br> \u5982 <code>&#39;@&#39;</code> \u5728\u7B2C\u4E8C\u4E2A\u6570\u5B57\u7684\u4F4D\u7F6E 0\uFF08\u6307\u6700\u4F4E\u4F4D\uFF09\uFF0C<code>A</code> \u5728\u7B2C\u4E8C\u4E2A\u6570\u5B57\u7684\u4F4D\u7F6E 1 \uFF08\u6307\u5012\u6570\u7B2C\u4E8C\u4F4D\uFF09....</p><p>\u65F6\u95F4\u590D\u6742\u5EA6\uFF1AO(n)\uFF0Cn \u4E3A\u5B57\u7B26\u4E32\u957F\u5EA6\u3002<br> \u7A7A\u95F4\u590D\u6742\u5EA6\uFF1AO(S)\uFF0CS \u5B57\u7B26\u96C6\u5927\u5C0F\uFF0C\u6700\u5927\u4E3A 95 \u3002</p><h3 id="\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801" aria-hidden="true">#</a> \u4EE3\u7801</h3><p>\u54C8\u5E0C\u8868\u5B9E\u73B0</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">canPermutePalindrome</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ch <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> ch <span class="token keyword">of</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> count<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F4D\u8FD0\u7B97\u5B9E\u73B0</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">canPermutePalindrome</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> code1 <span class="token operator">=</span> <span class="token string">&#39;@&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> code2 <span class="token operator">=</span> <span class="token string">&#39;\`&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">let</span> numa <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> numb <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> numc <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> code <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&lt;</span> code1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      numa <span class="token operator">^=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>code <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>code <span class="token operator">&lt;</span> code2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      numb <span class="token operator">^=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>code <span class="token operator">-</span> code1<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      numc <span class="token operator">^=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>code <span class="token operator">-</span> code2<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numa <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> count<span class="token operator">++</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numb <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> count<span class="token operator">++</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>numc <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> count<span class="token operator">++</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),o=[e];function c(l,u){return s(),a("div",null,o)}var r=n(t,[["render",c],["__file","4. \u56DE\u6587\u6392\u5217.html.vue"]]);export{r as default};
